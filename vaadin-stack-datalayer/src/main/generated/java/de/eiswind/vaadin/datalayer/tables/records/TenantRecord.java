/**
 * This class is generated by jOOQ
 */
package de.eiswind.vaadin.datalayer.tables.records;


import de.eiswind.vaadin.datalayer.tables.Tenant;
import de.eiswind.vaadin.datalayer.tables.interfaces.ITenant;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TenantRecord extends UpdatableRecordImpl<TenantRecord> implements Record7<Long, String, String, String, String, Integer, Integer>, ITenant {

	private static final long serialVersionUID = 1574519593;

	/**
	 * Setter for <code>public.TENANT.ID</code>.
	 */
	@Override
	public void setId(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>public.TENANT.ID</code>.
	 */
	@NotNull
	@Override
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>public.TENANT.TENANT_NAME</code>.
	 */
	@Override
	public void setTenantName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>public.TENANT.TENANT_NAME</code>.
	 */
	@NotNull
	@Size(max = 100)
	@Override
	public String getTenantName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.TENANT.SCHEMA</code>.
	 */
	@Override
	public void setSchema(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>public.TENANT.SCHEMA</code>.
	 */
	@NotNull
	@Size(max = 100)
	@Override
	public String getSchema() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>public.TENANT.USER</code>.
	 */
	@Override
	public void setUser(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>public.TENANT.USER</code>.
	 */
	@NotNull
	@Size(max = 100)
	@Override
	public String getUser() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>public.TENANT.PASSWORD</code>.
	 */
	@Override
	public void setPassword(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>public.TENANT.PASSWORD</code>.
	 */
	@NotNull
	@Size(max = 100)
	@Override
	public String getPassword() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>public.TENANT.MIN_IDLE</code>.
	 */
	@Override
	public void setMinIdle(Integer value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>public.TENANT.MIN_IDLE</code>.
	 */
	@NotNull
	@Override
	public Integer getMinIdle() {
		return (Integer) getValue(5);
	}

	/**
	 * Setter for <code>public.TENANT.MAX_CONNECTIONS</code>.
	 */
	@Override
	public void setMaxConnections(Integer value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>public.TENANT.MAX_CONNECTIONS</code>.
	 */
	@NotNull
	@Override
	public Integer getMaxConnections() {
		return (Integer) getValue(6);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Long, String, String, String, String, Integer, Integer> fieldsRow() {
		return (Row7) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<Long, String, String, String, String, Integer, Integer> valuesRow() {
		return (Row7) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Tenant.TENANT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Tenant.TENANT.TENANT_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Tenant.TENANT.SCHEMA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Tenant.TENANT.USER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return Tenant.TENANT.PASSWORD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field6() {
		return Tenant.TENANT.MIN_IDLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field7() {
		return Tenant.TENANT.MAX_CONNECTIONS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getTenantName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getSchema();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getUser();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getPassword();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value6() {
		return getMinIdle();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value7() {
		return getMaxConnections();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord value2(String value) {
		setTenantName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord value3(String value) {
		setSchema(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord value4(String value) {
		setUser(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord value5(String value) {
		setPassword(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord value6(Integer value) {
		setMinIdle(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord value7(Integer value) {
		setMaxConnections(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TenantRecord values(Long value1, String value2, String value3, String value4, String value5, Integer value6, Integer value7) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ITenant from) {
		setId(from.getId());
		setTenantName(from.getTenantName());
		setSchema(from.getSchema());
		setUser(from.getUser());
		setPassword(from.getPassword());
		setMinIdle(from.getMinIdle());
		setMaxConnections(from.getMaxConnections());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ITenant> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TenantRecord
	 */
	public TenantRecord() {
		super(Tenant.TENANT);
	}

	/**
	 * Create a detached, initialised TenantRecord
	 */
	public TenantRecord(Long id, String tenantName, String schema, String user, String password, Integer minIdle, Integer maxConnections) {
		super(Tenant.TENANT);

		setValue(0, id);
		setValue(1, tenantName);
		setValue(2, schema);
		setValue(3, user);
		setValue(4, password);
		setValue(5, minIdle);
		setValue(6, maxConnections);
	}
}
